---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# General Environment Settings
# NB the vip addresses aren't used, we specify per service
external_lb_vip_address: 127.0.0.1
internal_lb_vip_address: 127.0.0.1
debug: true

## Container destruction when testing repeatedly
force_containers_destroy: True
force_containers_data_destroy: True

# Setup host variables that can be reused later
# These need to be defaulted if the group is not available
# To get around ansible evaluating the hostvars variable, we set a string
test_galera_group: "{{ ((groups['galera_all'] is defined) and (groups['galera_all'] | length > 0)) | ternary('galera_all', 'all_containers') }}"
test_rabbitmq_group: "{{ ((groups['rabbitmq_all'] is defined) and (groups['rabbitmq_all'] | length > 0)) | ternary('rabbitmq_all', 'all_containers') }}"
test_memcached_group: "{{ ((groups['memcached_all'] is defined) and (groups['memcached_all'] | length > 0)) | ternary('memcached_all', 'all_containers') }}"
test_keystone_group: "{{ ((groups['keystone_all'] is defined) and (groups['keystone_all'] | length > 0)) | ternary('keystone_all', 'all_containers') }}"
test_glance_group: "{{ ((groups['glance_all'] is defined) and (groups['glance_all'] | length > 0)) | ternary('glance_all', 'all_containers') }}"
test_nova_api_metadata_group: "{{ ((groups['nova_api_metadata'] is defined) and (groups['nova_api_metadata'] | length > 0)) | ternary('nova_api_metadata', 'all_containers') }}"
test_nova_api_compute_group: "{{ ((groups['nova_api_os_compute'] is defined) and (groups['nova_api_os_compute'] | length > 0)) | ternary('nova_api_os_compute', 'all_containers') }}"
test_nova_console_group: "{{ ((groups['nova_console'] is defined) and (groups['nova_console'] | length > 0)) | ternary('nova_console', 'all_containers') }}"
test_neutron_agent_group: "{{ ((groups['neutron_agent'] is defined) and (groups['neutron_agent'] | length > 0)) | ternary('neutron_agent', 'all_containers') }}"
test_swift_proxy_group: "{{ ((groups['swift_proxy'] is defined) and (groups['swift_proxy'] | length > 0)) | ternary('swift_proxy', 'all_containers') }}"
test_ironic_api_group: "{{ ((groups['ironic_api'] is defined) and (groups['ironic_api'] | length > 0)) | ternary('ironic_api', 'all_containers') }}"
test_galera_host: "{{ hostvars[groups[test_galera_group][0]]['ansible_host'] }}"
test_rabbitmq_host: "{{ hostvars[groups[test_rabbitmq_group][0]]['ansible_host'] }}"
test_memcached_host: "{{ hostvars[groups[test_memcached_group][0]]['ansible_host'] }}"
test_keystone_host: "{{ hostvars[groups[test_keystone_group][0]]['ansible_host'] }}"
test_glance_host: "{{ hostvars[groups[test_glance_group][0]]['ansible_host'] }}"
test_nova_api_metadata_host: "{{ hostvars[groups[test_nova_api_metadata_group][0]]['ansible_host'] }}"
test_nova_api_compute_host: "{{ hostvars[groups[test_nova_api_compute_group][0]]['ansible_host'] }}"
test_nova_console_host: "{{ hostvars[groups[test_nova_console_group][0]]['ansible_host'] }}"
test_neutron_agent_host: "{{ hostvars[groups[test_neutron_agent_group][0]]['ansible_host'] }}"
test_swift_proxy_host: "{{ hostvars[groups[test_swift_proxy_group][0]]['ansible_host'] }}"
test_ironic_api_host: "{{ hostvars[groups[test_ironic_api_group][0]]['ansible_host'] }}"

## LXC container default bind mounts
lxc_container_default_bind_mounts:
  - host_directory: "/openstack/backup/{{ inventory_hostname }}"
    container_directory: "/var/backup"
  - host_directory: "/openstack/log/{{ inventory_hostname }}"
    container_directory: "/var/log"

# LXC Settings
lxc_net_address: 10.100.100.1
lxc_net_netmask: 255.255.255.0
lxc_net_dhcp_range: 10.100.100.2,10.100.100.99
lxc_net_bridge: lxcbr0
lxc_kernel_options:
  - { key: 'fs.inotify.max_user_instances', value: 1024 }

# Galera Settings
galera_root_password: secrete
galera_root_user: root
galera_innodb_buffer_pool_size: 512M
galera_innodb_log_buffer_size: 32M
galera_wsrep_node_name: "{{ inventory_hostname }}"
galera_wsrep_provider_options:
  - { option: "gcache.size", value: "32M" }
galera_server_id: "{{ inventory_hostname | string_2_int }}"

# RabbitMQ Settings
rabbitmq_cookie_token: secrete
rabbitmq_servers: "{{ test_rabbitmq_host }}"
rabbitmq_use_ssl: False
rabbitmq_port: 5672
rabbitmq_password: "secrete"

# Memcache Settings
memcached_listen: "{{ test_memcached_host }}"
memcached_servers: "{{ test_memcached_host }}"
memcached_encryption_key: "secrete"

# Keystone Settings
keystone_ssl: True
keystone_admin_user_name: admin
keystone_admin_tenant_name: admin
keystone_auth_admin_password: "SuperSecretePassword"
keystone_service_adminuri_insecure: false
keystone_service_internaluri_insecure: false
keystone_service_publicuri: "http://{{ test_keystone_host }}:5000"
keystone_service_publicurl: "{{ keystone_service_publicuri }}/v3"
keystone_service_internaluri: "http://{{ test_keystone_host }}:5000"
keystone_service_internalurl: "{{ keystone_service_internaluri }}/v3"
keystone_service_adminuri: "http://{{ test_keystone_host }}:35357"
keystone_service_adminurl: "{{ keystone_service_adminuri }}/v3"
keystone_service_password: "secrete"
keystone_rabbitmq_password: "{{ rabbitmq_password }}"
keystone_rabbitmq_port: "{{ rabbitmq_port }}"
keystone_rabbitmq_servers: "{{ rabbitmq_servers }}"
keystone_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
keystone_rabbitmq_userid: keystone
keystone_rabbitmq_vhost: /keystone
keystone_galera_database: keystone
keystone_galera_address: "{{ test_galera_host }}"
keystone_container_mysql_password: "SuperSecrete"
keystone_venv_tag: "testing"
keystone_developer_mode: true
keystone_git_install_branch: stable/newton
keystone_requirements_git_install_branch: stable/newton
keystone_service_region: RegionOne

# Glance specific settings
glance_service_publicuri: "http://{{ test_glance_host }}:9292"
glance_service_publicurl: "{{ glance_service_publicuri }}"
glance_service_internaluri: "http://{{ test_glance_host }}:9292"
glance_service_internalurl: "{{ glance_service_internaluri }}"
glance_service_adminuri: "http://{{ test_glance_host }}:9292"
glance_service_adminurl: "{{ glance_service_adminuri }}"
glance_service_port: 9292
glance_service_user_name: glance
glance_container_mysql_password: "SuperSecrete"
glance_developer_mode: true
glance_galera_address: "{{ test_galera_host }}"
glance_galera_database: glance
glance_git_install_branch: stable/newton
glance_profiler_hmac_key: "secrete"
glance_rabbitmq_password: "{{ rabbitmq_password }}"
glance_rabbitmq_port:  "{{ rabbitmq_port }}"
glance_rabbitmq_servers: "{{ rabbitmq_servers }}"
glance_rabbitmq_userid: glance
glance_rabbitmq_vhost: /glance
glance_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
glance_requirements_git_install_branch: stable/newton
glance_service_password: "secrete"
glance_venv_tag: "testing"
glance_host: "{{ test_glance_host }}"
glance_api_servers: "{{ test_glance_host }}"

# Nova specific settings
nova_api_container_mysql_password: "SuperSecrete"
nova_api_galera_address: "{{ test_galera_host }}"
nova_api_galera_database: nova_api
nova_api_galera_user: nova_api
nova_glance_api_servers: "http://{{ test_glance_host }}:9292"
nova_container_mysql_password: "SuperSecrete"
nova_developer_mode: true
nova_galera_address: "{{ test_galera_host }}"
nova_galera_database: nova
nova_git_install_branch: stable/newton
nova_keystone_auth_plugin: password
nova_management_address: "{{ ansible_host }}"
nova_metadata_port: 8775
nova_metadata_host: "{{ test_nova_api_metadata_host }}"
nova_metadata_proxy_secret: "secrete"
nova_novncproxy_vncserver_listen: localhost
nova_novncproxy_vncserver_proxyclient_address: localhost
nova_rabbitmq_password: "{{ rabbitmq_password }}"
nova_rabbitmq_port:  "{{ rabbitmq_port }}"
nova_rabbitmq_servers: "{{ rabbitmq_servers }}"
nova_rabbitmq_userid: nova
nova_rabbitmq_vhost: /nova
nova_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
nova_requirements_git_install_branch: stable/newton
nova_program_name: nova-api-os-compute
nova_service_adminuri: "http://{{ test_nova_api_compute_host }}:8774"
nova_service_adminurl: "{{ nova_service_adminuri }}/v2.1/%(tenant_id)s"
nova_service_publicuri: "http://{{ test_nova_api_compute_host }}:8774"
nova_service_publicurl: "{{ nova_service_publicuri }}/v2.1/%(tenant_id)s"
nova_service_internaluri: "http://{{ test_nova_api_compute_host }}:8774"
nova_service_internalurl: "{{ nova_service_internaluri }}/v2.1/%(tenant_id)s"
nova_spice_html5proxy_base_uri: "http://{{ test_nova_console_host }}:6082"
nova_spice_html5proxy_base_url: "{{ nova_spice_html5proxy_base_uri }}/spice_auto.html"
nova_service_password: "secrete"
nova_service_project_domain_id: default
nova_service_project_name: service
nova_service_region: RegionOne
nova_service_user_domain_id: default
nova_service_user_name: nova
nova_venv_bin: "/openstack/venvs/nova-{{ nova_venv_tag }}/bin"
nova_venv_tag: "testing"
nova_virt_type: qemu
# lxd specific vars
lxd_trust_password: "SuperSecrete"

# Neutron specific settings
neutron_container_mysql_password: SuperSecrete
neutron_developer_mode: true
neutron_galera_address: "{{ test_galera_host }}"
neutron_galera_database: neutron
neutron_git_install_branch: stable/newton
neutron_ha_vrrp_auth_password: secrete
neutron_management_address: "{{ test_neutron_agent_host }}"
neutron_rabbitmq_password: "{{ rabbitmq_password }}"
neutron_rabbitmq_port:  "{{ rabbitmq_port }}"
neutron_rabbitmq_servers: "{{ rabbitmq_servers }}"
neutron_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
neutron_rabbitmq_userid: neutron
neutron_rabbitmq_vhost: /neutron
neutron_requirements_git_install_branch: stable/newton
neutron_service_publicuri: "http://{{ test_neutron_agent_host }}:9696"
neutron_service_publicurl: "{{ neutron_service_publicuri }}"
neutron_service_adminuri: "http://{{ test_neutron_agent_host }}:9696"
neutron_service_adminurl: "{{ neutron_service_adminuri }}"
neutron_service_internaluri: "http://{{ test_neutron_agent_host }}:9696"
neutron_serivce_internalurl: "{{ neutron_service_internaluri }}"
neutron_service_password: "secrete"
neutron_service_project_name: service
neutron_service_region: RegionOne
neutron_service_user_name: neutron
neutron_venv_tag: testing
neutron_provider_networks:
  network_types: "vxlan"
  network_vxlan_ranges: "1:1000"
neutron_plugin_type: ml2.lxb

# Cinder specific settings
cinder_backends_rbd_inuse: false
cinder_ceph_client: cinder

# Swift specific settings
swift_container_mysql_password: "SuperSecrete"
swift_dispersion_password: "secrete"
swift_hash_path_prefix: "secrete_prefx"
swift_hash_path_suffix: "secrete_suffix"
swift_service_password: "secrete"
swift_developer_mode: true
swift_git_install_branch: stable/newton
swift_venv_tag: untagged
swift_venv_bin: "/openstack/venvs/swift-{{ swift_venv_tag }}/bin"
swift_service_publicuri: "http://{{ test_swift_proxy_host }}:8080"
swift_service_adminuri: "http://{{ test_swift_proxy_host }}:8080"
swift_service_internaluri: "http://{{ test_swift_proxy_host }}:8080"
swift:
  storage_network: "{{ test_swift_storage_network | default('eth2') }}"
  replication_network: "{{ test_swift_repl_network | default('eth3') }}"
  part_power: 8
  repl_number: "{{ test_swift_repl_number | default(3) }}"
  region: "{{ test_swift_region | default(1) }}"
  drives:
    - name: swift1
    - name: swift2
  mount_point: /openstack
  storage_policies:
    - policy:
        name: gold
        index: 0
        default: True
swift_proxy_server_conf_overrides:
  "filter:keystoneauth":
    reseller_prefix: "AUTH, SERVICE"
    "SERVICE_service_roles": "test5"
# For testing always use pretend_min_part_hours_passed
swift_pretend_min_part_hours_passed: True

# Ironic specific settings
ironic_venv_tag: "testing"
ironic_developer_mode: True
ironic_git_install_branch: stable/newton
ironic_requirements_git_install_branch: stable/newton
ironic_service_publicuri: "http://{{ test_ironic_api_host }}:6385"
ironic_service_publicurl: "{{ ironic_service_publicuri }}"
ironic_service_adminuri: "http://{{ test_ironic_api_host }}:6385"
ironic_service_adminurl: "{{ ironic_service_adminuri }}"
ironic_service_internaluri: "http://{{ test_ironic_api_host }}:6385"
ironic_service_internalurl: "{{ ironic_service_internaluri }}"
ironic_service_password: "secrete"
ironic_service_name: ironic
ironic_service_project_name: "service"
ironic_galera_address: "{{ test_galera_host }}"
ironic_galera_database: ironic
ironic_galera_user: ironic
ironic_container_mysql_password: "secrete"
ironic_rabbitmq_password: "{{ rabbitmq_password }}"
ironic_rabbitmq_userid: ironic
ironic_rabbitmq_vhost: /ironic
ironic_rabbitmq_servers: "{{ rabbitmq_servers }}"
ironic_rabbitmq_use_ssl: "{{ rabbitmq_use_ssl }}"
ironic_rabbitmq_port: "{{ rabbitmq_port }}"
ironic_standalone: False
ironic_swift_temp_url_secret_key: secrete
ironic_keystone_auth_plugin: password

# Tempest specific settings
tempest_developer_mode: True
tempest_git_install_branch: 304802830b56354a83bad86925851107411d45ec
tempest_venv_tag: "{{ tempest_git_install_branch }}"
# tempest_venv_bin is the same as the default in os_tempest role, but we set
# it again here so we can refer to it in test-nova-functional.yml
tempest_venv_bin: "/opt/tempest_{{ tempest_venv_tag }}/bin"
tempest_public_subnet_cidr: 10.1.3.0/24
tempest_log_dir: "/var/log/"
tempest_main_group: utility_all
tempest_service_available_aodh: "{{ ((groups['aodh_all'] is defined) and (groups['aodh_all'] | length > 0)) }}"
tempest_service_available_ceilometer: "{{ ((groups['ceilometer_all'] is defined) and (groups['ceilometer_all'] | length > 0)) }}"
tempest_service_available_cinder: "{{ ((groups['cinder_all'] is defined) and (groups['cinder_all'] | length > 0)) }}"
tempest_service_available_glance: "{{ ((groups['glance_all'] is defined) and (groups['glance_all'] | length > 0)) }}"
tempest_service_available_heat: "{{ ((groups['heat_all'] is defined) and (groups['heat_all'] | length > 0)) }}"
tempest_service_available_horizon: "{{ ((groups['horizon_all'] is defined) and (groups['horizon_all'] | length > 0)) }}"
tempest_service_available_neutron: "{{ ((groups['neutron_all'] is defined) and (groups['neutron_all'] | length > 0)) }}"
tempest_service_available_nova: "{{ ((groups['nova_all'] is defined) and (groups['nova_all'] | length > 0)) }}"
tempest_service_available_swift: "{{ ((groups['swift_all'] is defined) and (groups['swift_all'] | length > 0)) }}"

# openrc settings
openrc_os_password: "{{ keystone_auth_admin_password }}"
openrc_os_domain_name: "Default"
openrc_os_auth_url: "http://{{ test_keystone_host }}:5000/v3"

# Set workers for all services to optimise memory usage
ceilometer_api_workers: 2
ceilometer_collector_workers: 2
ceilometer_notification_workers: 2
cinder_osapi_volume_workers: 2
glance_api_workers: 2
glance_registry_workers: 2
heat_api_workers: 2
heat_engine_workers: 2
horizon_wsgi_processes: 2
horizon_wsgi_threads: 2
keystone_wsgi_processes: 2
neutron_api_workers: 2
neutron_metadata_workers: 1
neutron_rpc_workers: 1
nova_conductor_workers: 2
nova_metadata_workers: 2
nova_osapi_compute_workers: 2
swift_account_server_workers: 2
swift_container_server_workers: 2
swift_object_server_workers: 2
swift_proxy_server_workers: 2

# PIP install options
# TODO(odyssey4me): Remove pycparser once https://github.com/eliben/pycparser/issues/147 is resolved
# Note: libvirt-python is here to ensure that it always installs with the right binaries
pip_install_options: "--no-binary pycparser --no-binary libvirt-python"

